CS250
Test 1
Bash and Linux

HENGYI LI


Directions: This test must be completed in a Unix environment, either
Linux or Mac OS.  In a new text document, write your name and then
your answers to the questions below.  Clearly number each answer
indicating to which question it pertains.

All lines are limited to no more than 78 columns in length (unless
noted).  All characters must be ASCII.

Save your work frequently.  This document must be submitted by 11:20
to http://borax.truman.edu/250/submit.php.  Join the class zoom when
you submit to confirm with me that I have your answer file.

0. (5 pts) Execute the command
$ uname -a
and paste the line that results as your answer.  For this answer, you
can violate the 78-column line length limit if necessary.

Linux sand 4.19.0-17-amd64 #1 SMP Debian 4.19.194-3 (2021-07-18) x86_64 GNU/Linux


1. (5 pts) Show a command you could use to display the current value
of your PATH environment variable, and show the current value of your
PATH variable.  For this answer, you can violate the 78-column line
length limit if necessary.

Answer:
echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/usr/local/MATLAB/R2013a/bin


2. (10 pts) Show a single command chain you could use to display
exactly lines 4, 5, and 6 of the file foo.  You may assume that the
file has at least 6 lines, and possibly more than 6.

Answer:
cat foo | head -n 6 | tail -n 3

3. (5 pts) Show a single command chain you would use to display every
line in the file foo that contains a string of at least 5 digits in a
row.

Answer:
grep -E '[0-9] {5}' foo


4. (5 pts) Show the command(s) you would use to display every line in
the file foo that does not begin with an uppercase letter.

Answer:
grep -vE '^[A-Z]' foo

5. (10 pts) Assume the file foo is a csv file with comma-separated
fields (not tab-separated), has at least five columns of data, and
that the left-most column is designated as column 0.  Show a single
command chain that would extract column 3, sort the column in
descending ASCII order, and append the results to end of file bar.

Answer:
cut -f3 foo | sort -n >> bar

6. (10 pts)  Explain in English the full implications of the command
$ chmod 751 foo

a) assuming foo is a directory
    Set the directory as the user can read, write and execute. The group can only read and
    execute. Even through the others could execute, but since it's a directory so it does have no
    meanings.
    In conclusion, the $ chmod 751 foo command is just let the user can read and write ,
    group can read and others cannot read or write

b) assuming foo is a shell script file
  Command chmod 751 foo set the script file for the user can read, write and execute. The group
  can read and execute, the others can execute only.

7. (25 pts) Write a Bash script that accepts two arguments that
calculates the cost of a speeding ticket.  The first argument is the
actual speed and the second argument is the speed limit, both
expressed as positive integers.  The script should print a single
integer to standard output which is the amount of the ticket.  The
rules are: for any speed less than or equal to 5 mph over the limit,
no ticket is issued, so the amount is zero.  For a speed greater than
5 mph but not more than 15 mph over the limit, the ticket amount is
$50.  For a speed greater than 15 mph over the limit, the ticket is
$100 plus $1 for every 1 mph over the limit.  A run of your script
should look exactly like this:

$ ./scriptname 53 50
0

You may assume that any arguments will always be correctly formed
positive integers, but you should check for an incorrect number of
arguments and exit with an appropriate status if an incorrect number
of arguments is found.

if[[ $1 -lt $(($2 + 5)) || $1 -eq $(($2 + 5))  ]]
then
  amount=0
elif [[ $1 -gt $(($2 + 5)) && $1 -lt $(($2 + 15)) || $1 -eq $(($2 + 15))]]
then
  amount=50
elif [[ $1 -gt $(($2 + 15))]]
then
  amount=$((100 + ($1-($2 + 15))))
fi
$amount

8. (25 pts) Write a Bash script that does the following.  It iterates
through every file in the current directory that ends in .c and for
every such file attempts to compile it using the command

clang -c filename

Assume that clang exits with status 0 if the compilation was
successful, and with non-zero status if the compilation failed for any
reason.
Write the name of every file that successfully compiled into
a file in the current directory named "succeed.txt", and the names of
the other files into a file named "fail.txt".  At the end, print to
standard output a single integer that gives the number of files that
successfully compiled.  A run of your script should look exactly like
this, assuming four of the six .c files in the current directory
compiled successfully:

$ ./scriptname
4

for file in $directory
do
  $(clang -c "$directory/$file") 1> succeed.txt 2>fail.ext
done

wc -l succeed.txt