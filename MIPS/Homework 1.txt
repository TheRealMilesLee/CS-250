1.

2.
(A).  A[1] = a
lw $t0, 0($s0)      # Copy a to $t0
sw $t0, 4($s6)     # Store value in t0 to A[1]

(B). b = A[2]
lw $t1, 8($s6)      # Copy A[2] to $t1
sw $t1, 0($s1)      # Store value in t1 to b

(C). c = A[i]
sll $t2, $s4, 2                # $t2 = i * 4
addu $t2, $t2, $s6        # $t2 = &A[i]
lw $t3, 0($t2)                # $t3 = A[i]
sw $t3, 0($s2)               # $t3 = c

(D). A[i] = B[i]
sll $t0, $s4, 2                   # $t0 = 1 * 4
addu $t1, $t0, $s7            # t1 = &B[i]
lw $t2, 0($t1)                    # $t2 = B[i]
addu $t3, $t0, $s6           # $t3 = &A[i]
sw $t0, 0($t3)                  # A[i] = B[i]

(E). A[i - 1] = B[i + 1];
sll $t0, $s4, 2                    # $t0 = 1 * 4
addu $t1, $t0, $s7            #  t1 = &B[i]
lw $t2, 4($t1)                   # $t2 = B[i + 1]
addu $t3, $t0, $s6          # $t3 = &A[i]
sw $t0, - 4($t3)              # A[i - 1] = B[i + 1]

3.
(A). b = ++a;
lw $t0, 0($s0)                # Load a to temp
addi t0, t0, 1                   # increment temp
sw $s0, $t0                    # put it back to a
lw $t1, 0($s0)                 # load a again
sw $t1, 0($s1)                 # assign a to b

(B). c = ++a - b++;
lw $t0, 0($s0)               # Load a to temp
addi t0, t0, 1                 # increment temp
sw $t0, 0($s0)              # put it back to a
lw $t1, 0($s0)               # Load a to temp
lw $t2, 0($s1)               # Load b to temp
sub $s2, $t1, $t2           # c = a - b
addi t2, t2, 1                  # increment temp
sw $t2, 0($s1)               # put it back to b

(C). c = (a + b + c) + (c + -1 - d) - (a - -5);
add $t0, $s0, $s1   # A + B
add $t1, $t0, $s2   #(A + B) + C
add $t2, $s2, - 1    #(c + -1)
sub $t3, $t2, $s3   #(c + -1) - d
sub $t4, $s0, - 5   # a - -5
add $t5, $t1, $t3   #  (a + b + c) + (c + -1 - d)
sub $s2, $t5, $t4   # (a + b + c) + (c + -1 - d) - (a - -5);

4. Translate the following MIPS instructions into machine code. Give your answers in hex.
(A). addu $s0, $s2, $s4

addu      $s2       $s4     $s0   shamt   funct
000000 10010 10100 10000 00000 100001

0x02548021

(B). sub $t1, $zero, $t1

    sub     $zero     $t1     $t1    shamt  funct
000000 00000 01001 01001 00000 100010

0x00094822

(C). lw $fp, 0($zero)

  lw          0($zero)        $fp            immediate
100011    00000         11110    0000000000000000

0x8C1E00000

(D). sw $ra, -16($t7)
  sw        $t7     $ra     -16
101011 01111 11111 00010000

0xADFF10

5.  Disassemble the following machine code into MIPS assembly language statements.
(A). 0x00028821
000000 00000 00010 10001 00000 100001

addu $s1, $zero, $v0

(B). 0x34020004
001101 00000 00010 0000000000000100

ori $v0, 4($zero)

(C). 0x0211082a
000000 10000 10001 00001 00000 101010
slt $at, $s0, $s1

(D).  0x27a50004
001001 11 10100101 00000000 00000100
