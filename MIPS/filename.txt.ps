%!PS-Adobe-3.0
%%Title: Homework1.txt
%%For: AKRIA
%%Creator: a2ps version 4.14
%%CreationDate: Fri Nov 19 16:32:18 2021
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/**) p n
( * @file Homework 1.txt) N
( * @author Hengyi Li) N
( * @brief This file is to show some basic use of the MIPS language) N
( * @version 2.5) N
( * @date 2021-11-17 4:31 PM) N
( * @copyright Copyright \(c\) 2021. Hengyi Li All rights reserved.) N
( */) N
() N
(1.  Translate the following C statements into MIPS assembly language.) N
(\(A\). a = b + c + a) N
(add $t0, $s1, $s2        # b + c) N
(add $s0, $t0, $s0        # a = b + c + a) N
() N
(\(B\). b = \(a + b\) - \(a - b\)) N
(add $t0, $s0, $s1        # \(a + b\)) N
(sub $t1, $s0, $s1        # \(a - b\)) N
(sub $s1, $t0, $t1        # b = \(a + b\) - \(a - b\)) N
() N
(\(C\). d = a - \(a + b\) + \(a + b - c\) - d;) N
(add $t0, $s0, $s1      # \(a + b\)) N
(add $t1, $s0, $s1      # \(a + b\) [for \(a + b - c\)]) N
(sub $t2, $t1, $s2      # \(a + b - c\)) N
(sub $t3, $s0, $t0      #  a - \(a + b\)) N
(add $t4, $t3, $t2      # a - \(a + b\) + \(a + b - c\)) N
(sub $s3, $t4, $s3      # d = a - \(a + b\) + \(a + b - c\) - d) N
() N
(2. Translate the following C statements into MIPS assembly language.) N
(Assume A and B are arrays of 32-bit signed integers.) N
(\(A\).  A[1] = a) N
(lw $t0, 0\($s0\)      # Copy a to $t0) N
(sw $t0, 4\($s6\)      # Store value in t0 to A[1]) N
() N
(\(B\). b = A[2]) N
(lw $t1, 8\($s6\)      # Copy A[2] to $t1) N
(sw $t1, 0\($s1\)      # Store value in t1 to b) N
() N
(\(C\). c = A[i]) N
(sll $t2, $s4, 2           # $t2 = i * 4) N
(addu $t2, $t2, $s6        # $t2 = &A[i]) N
(lw $t3, 0\($t2\)            # $t3 = A[i]) N
(sw $t3, 0\($s2\)            # $t3 = c) N
() N
(\(D\). A[i] = B[i]) N
(sll $t0, $s4, 2               # $t0 = 1 * 4) N
(addu $t1, $t0, $s7            # t1 = &B[i]) N
(lw $t2, 0\($t1\)                # $t2 = B[i]) N
(addu $t3, $t0, $s6            # $t3 = &A[i]) N
(sw $t0, 0\($t3\)                # A[i] = B[i]) N
() N
(\(E\). A[i - 1] = B[i + 1];) N
(sll $t0, $s4, 2               # $t0 = 1 * 4) N
(addu $t1, $t0, $s7            # t1 = &B[i]) N
(lw $t2, 4\($t1\)                # $t2 = B[i + 1]) N
(addu $t3, $t0, $s6            # $t3 = &A[i]) N
(sw $t0, - 4\($t3\)              # A[i - 1] = B[i + 1]) N
() N
(3.  Translate the following C statements into MIPS assembly language.) N
(\(A\). b = ++a;) N
(lw $t0, 0\($s0\)                 # Load a to temp) N
(addi $t0, $t0, 1               # increment temp) N
(sw $s0, $t0                    # put it back to a) N
(Homework1.txt) (Page 1/4) (Nov 19, 21 16:31) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(lw $t1, 0\($s0\)                 # load a again) p n
(sw $t1, 0\($s1\)                 # assign a to b) N
() N
(\(B\). c = ++a - b++;) N
(lw $t0, 0\($s0\)                # Load a to temp) N
(addi $t0, $t0, 1              # increment temp) N
(sw $t0, 0\($s0\)                # put it back to a) N
(lw $t1, 0\($s0\)                # Load a to temp) N
(lw $t2, 0\($s1\)                # Load b to temp) N
(sub $s2, $t1, $t2             # c = a - b) N
(addi $t2, $t2, 1              # increment temp) N
(sw $t2, 0\($s1\)                # put it back to b) N
() N
(\(C\). c = \(a + b + c\) + \(c + -1 - d\) - \(a - -5\);) N
(add $t0, $s0, $s1             # a + b) N
(add $t1, $t0, $s2             # \(a + b\) + c) N
(add $t2, $s2, - 1             # \(c + -1\)) N
(sub $t3, $t2, $s3             # \(c + -1\) - d) N
(sub $t4, $s0, - 5             # a - -5) N
(add $t5, $t1, $t3             # \(a + b + c\) + \(c + -1 - d\)) N
(sub $s2, $t5, $t4             # \(a + b + c\) + \(c + -1 - d\) - \(a - -5\);) N
() N
(4. Translate the following MIPS instructions into machine code in hex.) N
(\(A\). addu $s0, $s2, $s4) N
() N
(  addu      $s2     $s4     $s0   shamt   funct) N
( 000000    10010   10100   10000  00000   100001) N
() N
(0x02548021) N
() N
(\(B\). sub $t1, $zero, $t1) N
() N
(  sub       $zero    $t1     $t1     shamt  funct) N
( 000000     00000   01001   01001    00000  100010) N
() N
(0x00094822) N
() N
(\(C\). lw $fp, 0\($zero\)) N
() N
(    lw          0\($zero\)        $fp            immediate) N
(   100011        00000         11110        0000000000000000) N
() N
(0x8C1E0000) N
() N
(\(D\). sw $ra, -16\($t7\)) N
() N
(  sw    $t7   $ra        -16) N
(101011 01111 11111 1111111111110000) N
() N
(0xADFFFFF0) N
() N
(5.  Disassemble the following machine code into MIPS language statements.) N
(\(A\). 0x00028821) N
() N
(      0       $zero     $v0     $s1       0       addu) N
(    000000    00000     00010  10001    00000    100001) N
() N
(addu $s1, $zero, $v0) N
() N
(\(B\). 0x34020004) N
() N
(    ori     $zero     $v0           immediate) N
(Homework1.txt) (Page 2/4) (Nov 19, 21 16:31) title
border
grestore
(Printed by AKRIA) rhead
(Homework1.txt) (1/2) (Friday November 19, 2021) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   001101   00000    00010       0000000000000100) p n
() N
(ori $v0, $zero, 4) N
() N
(\(C\). 0x0211082a) N
() N
(      0         $s0     $s1     $at        0         slt) N
(    000000     10000   10001   00001     00000      101010) N
() N
(slt $at, $s0, $s1) N
() N
(\(D\).  0x27a50004) N
() N
(  addiu    $sp   $a1           immediate) N
(  001001  11101 00101       0000000000000100) N
() N
(addiu $a1, $sp, 4) N
() N
(6. Convert the following C code to MIPS assembly language.) N
(\(A\).) N
(if \(a != b\)) N
({) N
(    a = b;) N
(}) N
(else) N
({) N
(  b = -a;) N
(}) N
(enter:) N
(  bne $s0, $s1, else      # goto else if a != b) N
(  sub $s1, $zero, $s0     # b = -a) N
(  j exit                  # goto exit) N
(else:) N
(  add $s0, $s1, 0         # a = b) N
(exit:) N
() N
(\(B\).) N
(while \(a + 1 == 2 * b\)) N
({) N
(  a *= 3;) N
(}) N
(loop:) N
(  add $t0, $s0, 1          # calculate a + 1) N
(  sll $t2, $s1, 1          # calculate 2 * b) N
(  bne $t0, $t2, exit       # goto exit if a + 1 != 2 * b) N
(  add $t3, $s0, $s0        # a + a [for a *= 3]) N
(  add $s0, $t3, $s0        # a + a + a, which is equal to a *= 3) N
(  j loop                   # goto loop) N
(exit:) N
() N
(\(C\).) N
(while \(a <= b + 1\)) N
({) N
(  b = 4 * \(a - 100\);) N
(  a++;) N
(}) N
() N
(loop:) N
(  add $t0, $s1, 1           # calculate the b + 1) N
(  slt $t1, $s0, $t0         # t1 = a < b + 1 ? 1: 0) N
(  bne $t1,1, condition      # if not a < b + 1, go to condition) N
(  bne $t1, 0, less_than     # if a < b + 1, go to less_than) N
(Homework1.txt) (Page 3/4) (Nov 19, 21 16:31) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  condition:) p n
(    bne $s0, $t0, exit      # If a is also not equal b + 1, go to the exit) N
(    j else                  # If it's equal, continue the process) N
(  else:) N
(    sub $t2, $s0, 100       # calculate the a - 100) N
(    sll $s1, $t2, 2         # b = 4 * \(a - 100\)) N
(    addi $s0, $s0, 1        # a++) N
(    j loop                  # goto loop) N
(  less_than:) N
(    sub $t2, $s0, 100       # calculate the a - 100) N
(    sll $s1, $t2, 2         # b = 4 * \(a - 100\)) N
(    addi $s0, $s0, 1        # a++) N
(    j loop                  # goto loop) N
(exit:) N
(Homework1.txt) (Page 4/4) (Nov 19, 21 16:31) title
border
grestore
(Printed by AKRIA) rhead
(Homework1.txt) (2/2) (Friday November 19, 2021) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
